#!/usr/bin/env python

from Bio import SeqIO
import random
import datetime
import sys
import argparse

parser = argparse.ArgumentParser(description = "This script will mutate all sequences of a nucleotide or amino acid multifasta with\
                                                the specified mutation rate. It was created for testing classifiers and does not take\
                                                into consideration transition/transversion rates. By default it only swaps bases, but\
                                                it can optionally introduce indels also. For version info, run `bit-version`.")

required = parser.add_argument_group('required arguments')

required.add_argument("-i", "--input-fasta", metavar = "<FILE>", help = "Starting fasta file", action = "store", required = True)

parser.add_argument("-m", "--mutation-rate",metavar = "<FLOAT>",  help = 'Wanted mutation rate, must be a float between 0 and 1 (default: "0.01")', \
                    action = "store", type = float, default = 0.01)
parser.add_argument("-t", "--molecule-type", help = "'NT' for nucleotides or 'AA' for amino acids (default = 'NT')", \
                    action = "store", choices = ["NT", "AA"], default = 'NT')
parser.add_argument("-o", "--output-fasta", metavar = "<FILE>", help = 'Output mutated fasta file (default: "mutated.fasta").', \
                    action = "store", default = "mutated.fasta")
parser.add_argument("-l", "--output-log", metavar = "<FILE>", help = 'Output file stating seed used and how many characters were changed in each input sequence (default: "mutated.log").', \
                    action = "store", default = "mutated.log")
parser.add_argument("-f", "--frequency-of-indels", metavar = "<FLOAT>", help = "Specify the frequency of indels wanted, must be a float between 0 and 1. This \
                                                           is a subset of the overall mutation rate provided via the '-m' argument. \
                                                           E.g., providing '-f 0.2' means 1 out of every 5 mutations will be an indel \
                                                           By default, no indels are incorporated (default = 0.0). The coded likelihood \
                                                           of adding an insertion/deletion is 50/50, with all characters equally likely \
                                                           to be inserted.", \
                    action = "store", type = float, default = 0.0)
parser.add_argument("-s", "--seed-for-randomization", metavar = "<INT>", help = "Can optionally set the seed used for the python 'random' module", \
                    action = "store", type = int)

if len(sys.argv)==1:
    parser.print_help(sys.stderr)
    sys.exit(0)

args = parser.parse_args()

################################################################################

def main():

    # checking mutation rate is within 0 and 1
    validate_mutation_rate(args.mutation_rate)

    # checking indel frequency rate is within 0 and 1
    validate_indel_rate(args.frequency_of_indels)

    # setting seed if provided, and recording it for the output log either way
    seed = set_seed()

    # setting substitution type
    available_substitutions = get_available_substitutions(args.molecule_type)

    # doing mutations per sequence
    with open (args.input_fasta, "r") as in_fasta, open(args.output_fasta, "w") as out_fasta, open(args.output_log, "w") as log:

        # starting log file
        log.write(f"# seed used: {seed}\n")
        log.write(f"# indel frequency utilizes: {args.frequency_of_indels}\n")
        log.write("# the rest below is a tab-delimited table summarizing the changes introduced to each input sequence\n")
        log.write("seq_id\tseq_length\ttotal_num_changes_made\tnum_characters_mutated\ttotal_indels_introduced\tnum_insertions_introduced\tnum_deletions_introduced\n")

        for seq_record in SeqIO.parse(in_fasta, "fasta"):

            seq, total_num_mutations, num_characters_to_mutate, num_indels, num_insertions_introduced, num_deletions_introduced = mutate(seq_record.seq, available_substitutions)

            out_fasta.write(f">{seq_record.id}\n")
            out_fasta.write(f"{seq}\n")

            # writing out log file
            log.write(f"{seq_record.id}\t{len(seq_record)}\t{total_num_mutations}\t{num_characters_to_mutate}\t{num_indels}\t{num_insertions_introduced}\t{num_deletions_introduced}\n")


################################################################################

### functions
def validate_mutation_rate(mutation_rate):

    if not 0 <= mutation_rate <= 1:
        print("\n    The '--mutation-rate' argument needs to be between 0 and and 1.\n")
        print("  Exiting for now.\n")
        sys.exit(1)

def validate_indel_rate(indel_rate):

    if not 0 <= indel_rate <= 1:
        print("\n    The '--frequency-of-indels' argument needs to be between 0 and and 1.\n")
        print("  Exiting for now.\n")
        sys.exit(1)


def set_seed():

    if args.seed_for_randomization:

        # setting seed to what was provided, if specified
        random.seed(args.seed_for_randomization)
        seed = args.seed_for_randomization

    else:
        # setting seed manually (pseudo-randomly) so we can always report it
        # it seems if you don't set it, you can't pull it out otherwise
        time = datetime.datetime.now()
        seed = time.hour * 10000 + time.minute * 100 + time.second
        random.seed(seed)

    return seed


def get_available_substitutions(molecule_type):

    if molecule_type == 'NT':
        return ['A', 'T', 'C', 'G']

    else:
        return ['A', 'R', 'N', 'D',
                'C', 'E', 'Q', 'G',
                'H', 'I', 'L', 'K',
                'M', 'F', 'P', 'S',
                'T', 'W', 'Y', 'V']


def mutate(seq : str, available_substitutions: list):

    # keeping track of which indexes were changed, so we don't change the same one twice (since this is for wanting a desired variation rate, not mimicking biology)
    character_changed_indexes = []

    # calculating total number of mutations
    total_num_mutations = round(len(seq) * args.mutation_rate)

    # calculating number of indels wanted (if any)
    num_indels = round(total_num_mutations * args.frequency_of_indels)

    # calculating how many characters will just be swapped (if not all)
    num_characters_to_mutate = total_num_mutations - num_indels

    # starting values for number of insertions and deletions added (if any)
    num_insertions_introduced = 0
    num_deletions_introduced = 0

    # doing all character changes first, then incorporating indels
    for _ in range(0, num_characters_to_mutate):

        # getting current index we will change (that wasn't already changed)
        m_index = random.choice([m_index for m_index in range(len(seq)) if m_index not in character_changed_indexes])

        # getting a new character for that position (that isn't the character already present)
        m_character = random.choice([character for character in available_substitutions if character != seq[m_index]])

        # mutating the sequence at that spot
        seq = seq[:m_index] + m_character + seq[m_index+1:]

        # tracking that this position was changed already
        character_changed_indexes.append(m_index)

    # now incorporating indels if specified (note this will not keep track if the same spot is being altered more than once)
    if num_indels != 0:

        for _ in range(0, num_indels):

            # random to decide if doing an insertion or deletion
            process = random.choice(["insertion", "deletion"])

            if process == "insertion":

                # getting current index we will incorporate an indel at (not tracking if an index was already altered by an indel incorporation)
                m_index = random.choice(range(len(seq)))

                # getting a new character to add
                m_character = random.choice(available_substitutions)

                # adding insertion
                seq = seq[:m_index] + m_character + seq[m_index:]

                num_insertions_introduced += 1

            elif process == "deletion":

                # getting current index we will incorporate an indel at (not tracking if an index was already altered by an indel incorporation)
                m_index = random.choice(range(len(seq)))

                # incorporating deletion
                seq = seq[:m_index] + seq[m_index+1:]

                num_deletions_introduced += 1

    return seq, total_num_mutations, num_characters_to_mutate, num_indels, num_insertions_introduced, num_deletions_introduced


if __name__ == "__main__":
    main()

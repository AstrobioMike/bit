#!/usr/bin/env python

import pandas as pd
import numpy as np
import sys
import argparse
import os


parser = argparse.ArgumentParser(description = 'This script outputs general summary stats for a numeric column. It can take stdin or \
                                              a file as input. It will run on the first (or only column) if not specified. Otherwise \
                                              you can indicate which column to summarize by column position or name. For version info, \
                                              run `bit-version`.')

required = parser.add_argument_group('required arguments')

required.add_argument("-i", "--input-file", metavar = "<FILE>", type = argparse.FileType('r'), default = '-', help = "Input file or stdin if none provided")

parser.add_argument("-c", "--column", metavar = "<TEXT>", help = "Specify the target column to summarize. Can be a number specifying the column index (1-based, like unix cut/awk), \
                                                     or can be a column name if also including the `--header` flag. (default: 1)", action = "store", default = 1)

parser.add_argument("-d", "--delimiter", metavar = "<STR>", help = "Specify the delimiter (default = '\\t')", action = "store", default = "\t")

parser.add_argument("--header", help = "Add this flag if your input has a header with column names", action = "store_true")

args = parser.parse_args()

## help menu access ##
# this handles if no standard in was provided and no -i input file was provided
if sys.stdin.isatty():

    if args.input_file.name == "<stdin>":
        parser.print_help(sys.stderr)
        sys.exit(0)

## reading in input
if args.header:
    input_header = 0
else:
    input_header = None

input_df = pd.read_csv(args.input_file, sep = args.delimiter, header = input_header)

## getting target column
try:
    args.column = int(args.column)
except:
    pass

if isinstance(args.column, int):
    column = args.column - 1
    target_array = input_df.iloc[: , column].to_numpy()

    # removing first entry if it is a string, and therefore likely a header
    if isinstance(target_array.flat[0], str):

        target_array = np.delete(target_array, 0)

        # and converting all to integers
        target_array = target_array.astype(int)

elif isinstance(args.column, str):

    # checking header was set to true if the user specified a column by name
    if not args.header:
        print("\n    If trying to specify which column by header name, you need to explicity add the `--header` flag also.\n")
        parser.print_help(sys.stderr)
        sys.exit(1)

    target_array = input_df[args.column].to_numpy()

# getting wanted values
input_n = target_array.size
input_min = np.round(np.min(target_array), decimals = 2)
input_max = np.round(np.max(target_array), decimals = 2)
input_mean = np.round(np.mean(target_array), decimals = 2)
input_median = np.round(np.median(target_array), decimals = 2)
input_stdev = np.round(np.std(target_array), decimals = 2)
percentile_1 = np.round(np.percentile(target_array, 1), decimals = 2)
percentile_5 = np.round(np.percentile(target_array, 5), decimals = 2)
percentile_10 = np.round(np.percentile(target_array, 10), decimals = 2)
percentile_25 = np.round(np.percentile(target_array, 25), decimals = 2)
percentile_50 = np.round(np.percentile(target_array, 50), decimals = 2)
percentile_75 = np.round(np.percentile(target_array, 75), decimals = 2)
percentile_90 = np.round(np.percentile(target_array, 90), decimals = 2)
percentile_95 = np.round(np.percentile(target_array, 95), decimals = 2)
percentile_99 = np.round(np.percentile(target_array, 99), decimals = 2)


# reporting
print(f"\n  Column '{args.column}' summary\n")

print(f"    {'N:':<15} {input_n}")
print(f"    {'Min:':<15} {input_min}")
print(f"    {'Max:':<15} {input_max}")
print(f"    {'Mean:':<15} {input_mean}")
print(f"    {'Median:':<15} {input_median}")
print(f"    {'StDev:':<15} {input_stdev}\n")
print(f"    Percentiles:\n")
print(f"        {'1st:':<11} {percentile_1}")
print(f"        {'5th:':<11} {percentile_5}")
print(f"        {'10th:':<11} {percentile_10}")
print(f"        {'25th:':<11} {percentile_25}")
print(f"        {'50th:':<11} {percentile_50}")
print(f"        {'75th:':<11} {percentile_75}")
print(f"        {'90th:':<11} {percentile_90}")
print(f"        {'95th:':<11} {percentile_95}")
print(f"        {'99th:':<11} {percentile_99}")
print("")

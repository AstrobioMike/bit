#!/usr/bin/env python

import sys
import os
import pandas as pd # type: ignore
import matplotlib.pyplot as plt # type: ignore
import textwrap
import argparse

parser = argparse.ArgumentParser(description = "This script takes as input a kraken2 report and generates bar plots for the most abundant taxa at each rank. \
                                                For version info, run `bit-version`.",
                                                epilog = "Ex. usage: bit-gen-kraken2-tax-plots -i kraken2.report -o out")

required = parser.add_argument_group('required arguments')

required.add_argument("-i", "--input-kraken2-report", metavar = "<FILE>", help = "Input kraken2 report", action = "store", required = True, dest = "input_kraken")

parser.add_argument("-o", "--output-prefix", metavar = "<STR>", help = 'Prefix for output plots if wanted (default: "")', action = "store", default = "", dest = "out_prefix")
parser.add_argument("-m", "--maximum-taxa-per-plot", metavar = "<INT>", help = 'The maximum number of unique taxa included in a plot (the rest are represented in "Other"; default: 10)',
                    action = "store", type = int, default = 10, dest = "max_taxa")
parser.add_argument("-p", "--minimum-percent-threshold", metavar = "<FLOAT>",
                    help = 'The minimum percent of reads a taxon must have in order to be included (the rest are represented in "Other"). This overrides --maximum-taxa-per-plot if set > 0. (default: 0.0 and to use --maximum-taxa-per-plot instead)',
                    action = "store", type = float, default = 0.0, dest = "min_percent")
parser.add_argument("--no-root", help = "Don't add the percent of reads stuck at Root to the overlain text on plots", action = "store_true")


if len(sys.argv) == 1:
    parser.print_help(sys.stderr)
    sys.exit(0)

args = parser.parse_args()

################################################################################

def main():

    df = read_in_kraken_report(args.input_kraken)

    total_reads, unclassified_percent, percent_reads_stuck_at_root = get_stats(df)

    df = reduce_kraken_report(df)

    df = add_domain_letter_to_taxon_name(df)

    for code, rank_name in rank_dict.items():

        sub_df = df[df["rank_code"] == code].copy()

        if sub_df.empty:
            continue

        sub_df = sub_df.groupby("taxon_name", as_index = False)["percent"].sum() # in case there are duplicates (which i don't think should happen)

        if args.min_percent > 0:

            above_thresh_df = sub_df[sub_df["percent"] >= args.min_percent].copy()
            below_thresh_df = sub_df[sub_df["percent"] < args.min_percent].copy()

            sum_others = below_thresh_df["percent"].sum()

            if above_thresh_df.empty and sum_others == 0:

                print(f"No taxa pass the {args.min_percent}% threshold at rank {rank_name}. Skipping plot.")
                continue

            if sum_others > 0:

                other_df = pd.DataFrame({"taxon_name": ["Other"], "percent": [sum_others]})
                above_thresh_df = pd.concat([above_thresh_df, other_df], ignore_index=True)

            make_barplot_threshold(above_thresh_df, rank_name, args.out_prefix, total_reads, unclassified_percent, percent_reads_stuck_at_root)

        else:

            make_barplot_top_N(sub_df, rank_name, args.out_prefix, args.max_taxa, total_reads, unclassified_percent, percent_reads_stuck_at_root)


################################################################################

rank_dict = {
    "D": "Domain",
    "P": "Phylum",
    "C": "Class",
    "O": "Order",
    "F": "Family",
    "G": "Genus",
    "S": "Species",
}

def preflight_checks():

    if not os.path.exists(args.input_kraken):
        print(f"\n    Specified input file not found: {args.input_kraken}")
        print("\n    Exiting for now :(\n")
        sys.exit(1)


def read_in_kraken_report(filepath: str) -> pd.DataFrame:
    """
    Expected columns per line (in one typical format):

        1. Percentage of reads covered by the clade rooted at this taxon
        2. Number of reads covered by the clade rooted at this taxon
        3. Number of reads assigned directly to this taxon
        4. A rank code, indicating (U)nclassified, (D)omain, (K)ingdom, (P)hylum, (C)lass, (O)rder, (F)amily, (G)enus, or (S)pecies. All other ranks are simply '-'.
        5. NCBI taxonomy ID
        6. indented scientific name
    """

    df = pd.read_csv(filepath, sep = "\t", header = None,
        names=["percent", "clade_reads", "this_level_reads",
               "rank_code", "tax_id", "taxon_name"],
        skip_blank_lines = True,
        dtype={
            "percent": float,
            "clade_reads": int,
            "this_level_reads": int,
            "rank_code": str,
            "tax_id": str,
            "taxon_name": str
        }
    )

    # removing leading/trailing whitespace from the 'taxon_name' column, as it's indented by rank
    df["taxon_name"] = df["taxon_name"].str.strip()

    return df


def get_stats(df: pd.DataFrame) -> tuple:

    total_reads = df.loc[df["rank_code"] == "U", "clade_reads"].sum() + df.loc[df["taxon_name"] == "root", "clade_reads"].sum()
    unclassified_percent = df.loc[df["rank_code"] == "U", "percent"].sum()
    total_reads_stuck_at_root = df.loc[df["taxon_name"] == "root", "this_level_reads"].sum()
    percent_reads_stuck_at_root = total_reads_stuck_at_root / total_reads * 100
    percent_reads_stuck_at_root = f"{percent_reads_stuck_at_root:.2f}".rstrip('0').rstrip('.')

    return total_reads, unclassified_percent, percent_reads_stuck_at_root


def reduce_kraken_report(df: pd.DataFrame) -> pd.DataFrame:
    """
    Simplify the Kraken report by removing unnecessary columns and rows.

    We'll keep the taxon name, rank code, and number of reads assigned to that taxon.
    """

    target_ranks = set(rank_dict.keys())

    # adding unclassied and root, as i might do something with them at some point
    target_ranks.update(["U", "R"])

    # getting number of reads stuck at root


    filtered_df = df.loc[df["rank_code"].isin(target_ranks)].copy()

    return filtered_df[["rank_code", "taxon_name", "percent", "clade_reads"]]


def add_domain_letter_to_taxon_name(df: pd.DataFrame) -> pd.DataFrame:
    """ Adding a domain letter to each taxon name, for easier interpretation. """

    domain_map = {
        "Bacteria": "B",
        "Archaea": "A",
        "Eukaryota": "E",
        "Viruses": "V",
        "root": "R",
        "unclassified": "U",
    }

    current_domain_letter = "?"

    for i, row in df.iterrows():

        if row["rank_code"] == "D":

            this_domain_name = row["taxon_name"]
            current_domain_letter = domain_map.get(this_domain_name, "?")

        else:

            df.at[i, "taxon_name"] = f"({current_domain_letter}) {row['taxon_name']}"

    return df


def make_barplot_threshold(sub_df: pd.DataFrame, rank_name: str, out_prefix: str,
                           total_reads: int, unclassified_percent: float, percent_reads_stuck_at_root: str) -> None:
    """
    Make a barplot for all taxa that meet the user-specified min-percent threshold.
    """
    df_sorted = sub_df.sort_values("percent", ascending=False).reset_index(drop=True)

    # No 'Other' slice is automatically created here, because the user wants
    # to strictly see only those that exceed the threshold.

    plot_barplot_and_save(df_sorted, rank_name, out_prefix, total_reads, unclassified_percent, percent_reads_stuck_at_root)


def make_barplot_top_N(sub_df: pd.DataFrame, rank_name: str, out_prefix: str, max_taxa: int,
                      total_reads: int, unclassified_percent: float, percent_reads_stuck_at_root: str) -> None:
    """
    Make a barplot for the top N taxa, combining the remainder into 'Other'.
    """
    df_sorted = sub_df.sort_values("percent", ascending=False).reset_index(drop=True)
    top_df = df_sorted.head(max_taxa).copy()

    sum_others = df_sorted["percent"][max_taxa:].sum()
    if sum_others > 0:
        other_df = pd.DataFrame({"taxon_name": ["Other"], "percent": [sum_others]})
        top_df = pd.concat([top_df, other_df], ignore_index=True)

    plot_barplot_and_save(top_df, rank_name, out_prefix, total_reads, unclassified_percent, percent_reads_stuck_at_root)


def plot_barplot_and_save(df_to_plot: pd.DataFrame, rank_name: str, out_prefix: str,
                          total_reads: int, unclassified_percent: float, percent_reads_stuck_at_root: str) -> None:
    """
    Given a (filtered) dataframe, plot and save the barplot.
    """

    df_sorted = df_to_plot.copy()

    # making sure "Other" is the last entry
    if "Other" in df_sorted["taxon_name"].values:

        other_row = df_sorted[df_sorted["taxon_name"] == "Other"]
        df_sorted = df_sorted[df_sorted["taxon_name"] != "Other"]
        df_sorted = pd.concat([df_sorted, other_row], ignore_index=True)

    df_to_plot = df_sorted.copy()

    def wrap_name(x):
        return "\n".join(textwrap.wrap(x, width=30))

    df_to_plot["taxon_name_wrapped"] = df_to_plot["taxon_name"].apply(wrap_name)

    x_positions = range(len(df_to_plot))
    main_title = f"{rank_name.capitalize()}-level dominant taxa"

    fig, ax = plt.subplots(figsize=(6, 4.5))

    ax.bar(x_positions, df_to_plot["percent"], color="steelblue")
    ax.set_xticks(x_positions)
    ax.set_xticklabels(df_to_plot["taxon_name_wrapped"], rotation=45, ha='right')


    if args.no_root:
        additional_text = (f"Sample total reads: {total_reads:,}\n"
                            f"Percent unclassified: {unclassified_percent:.2f}%")
    else:
        additional_text = (f"Sample total reads: {total_reads:,}\n"
                            f"Percent unclassified: {unclassified_percent:.2f}%\n"
                            f"Percent reads at Root: {percent_reads_stuck_at_root}%")

    ax.set_title(f"{main_title}")
    ax.set_ylabel("% of total reads", fontsize=10)
    ax.text(0.97, 0.97, additional_text, transform=ax.transAxes,
            ha='right', va='top', fontsize=9, color="black",
            bbox=dict(facecolor='white', alpha=0.6, linewidth=0.2, boxstyle="round,pad=0.2"))


    fig.tight_layout()

    if out_prefix == "":
        out_png = f"{rank_name.lower()}-barplot.png"
    else:
        out_png = f"{out_prefix}-{rank_name.lower()}-barplot.png"

    plt.savefig(out_png, dpi=150)
    plt.close()
    print(f"Generated: {out_png}")


if __name__ == "__main__":
    main()
